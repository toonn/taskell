name: Release 32bit binary

on: [push]
#on:
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#    - '*.*.*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      CFLAGS: -m32
      LDFLAGS: -m32
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up 32bit apt-get
        run: |
          sudo apt-get remove php7.3-fpm libmono-corlib4.5-cil monodoc-manual
          sudo dpkg --add-architecture i386
          sudo apt-get update
      - name: Install 32bit GCC
        run: |
          sudo apt-get install gcc:i386 cpp:i386 cpp-7:i386 gcc-7:i386 binutils:i386
      - name: Install 32bit GHC and cabal-install
        run: sudo apt-get install ghc:i386 cabal-install:i386
      - name: Install hpack and generate cabal file
        run: |
          sudo apt-get install hpack
          hpack
      - name: Build 32bit zlib
        run: |
          sudo apt-get install libghc-zlib-dev:i386
          # cabal install zlib --ghc-option="-optc-m32" --ghc-option="-opta-m32" --ghc-option="-optl-m32" --ld-option="-melf_i386" --hsc2hs-options="--cflag=-m32 --lflag=-m32"
      - name: Build 32bit taskell
        run: |
          cabal update
          cabal install --ghc-option="-optc-m32" --ghc-option="-opta-m32" --ghc-option="-optl-m32" --ld-option="-melf_i386"
      - name: Set tag.name
        id: tag
        run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}
      - name: Set archive.name
        id: archive
        run: |
          echo "::set-output name=name::taskell_${{ steps.tag.name }}_Linux-32bit.tar.gz"
      - name: Archive 32bit taskell
        run: |
          tar cf ${{ steps.archive.name }} ~/.cabal/bin/taskell
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ steps.archive.name }}
          asset_name: ${{ steps.archive.name }}
          asset_content_type: application/gzip
